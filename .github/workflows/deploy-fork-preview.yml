name: Deploy Fork Preview (Maintainer-Approved)

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled, unlabeled]

permissions:
  contents: read
  pull-requests: write
  deployments: write
  checks: write
  id-token: write

jobs:
  # Check fork status and label presence
  check-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      is_fork: ${{ steps.check.outputs.is_fork }}
      has_label: ${{ steps.check.outputs.has_label }}
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      should_notify: ${{ steps.check.outputs.should_notify }}
    steps:
      - name: Check fork status and label
        id: check
        run: |
          # Check if PR is from fork
          IS_FORK="false"
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            IS_FORK="true"
            echo "üîÄ PR is from fork: ${{ github.event.pull_request.head.repo.full_name }}"
          else
            echo "üìç PR is from same repository (will be handled by deploy-branch-preview.yml)"
          fi

          # Check if deploy-preview label is present
          HAS_LABEL="false"
          LABELS='${{ toJSON(github.event.pull_request.labels.*.name) }}'
          if echo "$LABELS" | grep -q "deploy-preview"; then
            HAS_LABEL="true"
            echo "üè∑Ô∏è 'deploy-preview' label found"
          else
            echo "‚è≠Ô∏è 'deploy-preview' label not found"
          fi

          # Output values
          echo "is_fork=$IS_FORK" >> $GITHUB_OUTPUT
          echo "has_label=$HAS_LABEL" >> $GITHUB_OUTPUT

          # Determine actions
          if [ "$IS_FORK" = "false" ]; then
            # Same-repo PR - skip entirely (handled by other workflow)
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "should_notify=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping: Same-repo PRs use deploy-branch-preview.yml"
          elif [ "$HAS_LABEL" = "true" ]; then
            # Fork with label - deploy
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "should_notify=false" >> $GITHUB_OUTPUT
            echo "‚úÖ Will deploy: Fork PR with deploy-preview label"
          else
            # Fork without label - just notify
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "should_notify=true" >> $GITHUB_OUTPUT
            echo "üìù Will notify: Fork PR without deploy-preview label"
          fi

  # Notify contributor that fork PRs need maintainer approval
  notify-fork:
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_notify == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Comment on fork PR about deployment limitation
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `## ‚ÑπÔ∏è Fork PR Detected

            Thank you for your contribution! üéâ

            **Deployment previews require maintainer approval** for fork PRs. This is because GitHub doesn't pass repository secrets to fork workflows for security reasons.

            ### What this means:
            - ‚úÖ Your code changes are being reviewed
            - ‚úÖ All local validation still runs
            - ‚è∏Ô∏è Preview deployment requires \`deploy-preview\` label

            ### What happens next:
            Once a maintainer reviews your code, they can:
            1. ‚úÖ Add the \`deploy-preview\` label to trigger a preview deployment
            2. üöÄ Merge your PR, which will deploy to production

            Thank you for understanding! üôè

            ---
            **For maintainers:** Review the code changes, then add the \`deploy-preview\` label to trigger deployment.

            <!-- FORK_PR_NOTICE -->`;

            try {
              // Check if we already posted this comment
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const existingComment = comments.data.find(comment =>
                comment.body && comment.body.includes('<!-- FORK_PR_NOTICE -->')
              );

              if (existingComment) {
                console.log('Updating existing fork notice comment');
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              } else {
                console.log('Creating new fork notice comment');
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              }
            } catch (error) {
              console.error('Failed to post comment:', error);
              throw error;
            }

  # Post a comment warning maintainers about security considerations
  safety-warning:
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Post security reminder for maintainer-approved deployment
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = `## üîê Maintainer-Approved Deployment Started

            **‚ö†Ô∏è Security Reminder:** This deployment has access to repository secrets. Ensure you've reviewed the code changes in this PR before the deployment completes.

            üöÄ Deployment in progress...

            **Deployment will include:**
            - API deployment to Google Cloud Run
            - Web deployment to Firebase Hosting
            - Full integration and E2E tests

            <!-- FORK_DEPLOY_WARNING -->`;

            try {
              console.log('Checking for existing security warning comment');
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });

              const existingComment = comments.data.find(comment =>
                comment.body && comment.body.includes('<!-- FORK_DEPLOY_WARNING -->')
              );

              if (!existingComment) {
                console.log('Creating new security warning comment');
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: commentBody
                });
              } else {
                console.log('Security warning comment already exists');
              }
            } catch (error) {
              console.error('Failed to post security warning:', error);
              throw error;
            }

  deploy:
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    uses: ./.github/workflows/reusable-deploy.yml
    secrets: inherit
    with:
      deployment_type: 'branch'
      branch_name: ${{ github.event.pull_request.head.ref }}
      pr_number: ${{ github.event.number }}

  test:
    needs: [check-prerequisites, deploy]
    if: needs.check-prerequisites.outputs.should_deploy == 'true'
    uses: ./.github/workflows/reusable-test.yml
    secrets: inherit
    with:
      api_url: ${{ needs.deploy.outputs.api_url }}
      web_url: ${{ needs.deploy.outputs.web_url }}
      deployment_type: 'branch'
      branch_name: ${{ github.event.pull_request.head.ref }}
      pr_number: ${{ github.event.number }}
